// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())
  email String @unique
  password String 
  username String @db.VarChar(50)
  reviews Review[]
  cart Cart?
  orders Order[]
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model Product {
  id String @id @default(uuid())
  title String @db.VarChar(100)
  description String @db.VarChar(500)
  price Float @db.DoublePrecision()
  quantity Int 
  image String 
  cartegory Category @relation(fields: [categoryId], references: [id])
  categoryId String
  reviews Review[] @relation("productReviews")
  cartItems ShoppingCartItem[] @relation("productCartItems")
}

model Category {
  id String @id @default(uuid())
  title CategoryEnum @default(clothing) @unique
  products Product[]
}


model Review {
  id String @id @default(uuid())
  description String @db.VarChar(200)
  rating Int 
  user User @relation(fields: [userId], references: [id])
  userId String
  product Product @relation("productReviews", fields: [productId], references: [id], onDelete: Cascade)
  productId String
  @@unique([userId, productId])
}

model Cart {
  id String @id @default(uuid())
  user User @relation(fields: [userId], references: [id])
  userId String @unique
 cartItems ShoppingCartItem[] @relation("cartItems")
}

model ShoppingCartItem {
  id String @id @default(uuid())
  cart Cart @relation("cartItems",fields: [cartId], references: [id], onDelete: Cascade)
  cartId String
  quantity Int
  product Product @relation("productCartItems" ,fields: [productId], references: [id], onDelete: Cascade)
  productId String

  @@unique([cartId, productId])
}


model Order{
  id String @id @default(uuid())
  user User @relation(fields: [userId], references: [id])
  userId String
  orderItems OrderItem?
}


model OrderItem {
  id String @id @default(uuid())
  total Float @db.DoublePrecision()
  order Order @relation(fields: [orderId], references: [id])
  orderId String @unique
  status OrderStatus @default(pending)
}


enum CategoryEnum {
  jewelery
  electronics
  clothing
}

enum OrderStatus {
  pending
  delivered
  cancelled
}